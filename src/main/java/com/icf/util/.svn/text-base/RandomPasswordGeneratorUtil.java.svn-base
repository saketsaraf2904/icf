package com.icf.util;

import java.util.Random;

import org.apache.log4j.Logger;
 
/**
 * Random Password Generator.
 * 
 * @author v2s
 */
public class RandomPasswordGeneratorUtil
{
	/** Default constructor. */
	private RandomPasswordGeneratorUtil() {
		
	}
	
	/** Logger for logging. */
	private static final Logger LOGGER = Logger.getLogger(RandomPasswordGeneratorUtil.class);
	
	/** Caps character for the new password. */
    private static final String ALPHA_CAPS  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    
    /** Lower case character for the new password. */
    private static final String ALPHA   = "abcdefghijklmnopqrstuvwxyz";
    
    /** Numbers in the password.*/
    private static final String NUM     = "0123456789";
    
    /** Special characters in the password.*/
    private static final String SPL_CHARS   = "@#$%";
 
    /**
     * Generate random password.
     * 
     * @param minLen : minimum length.
     * @param maxLen : maximum length.
     * @param noOfCAPSAlpha : number of caps characters.
     * @param noOfDigits : number of digits in the password.
     * @param noOfSplChars : number of special characters.
     * 
     * @return generated password.
     * 
     */
    protected static char[] generatePswd(int minLen, int maxLen, int noOfCAPSAlpha,
            int noOfDigits, int noOfSplChars) {
    	
    	if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("RandomPasswordGeneratorUtil:: generatePswd method - START");
        }
    	
        if(minLen > maxLen)
            throw new IllegalArgumentException("Min. Length > Max. Length!");
        if( (noOfCAPSAlpha + noOfDigits + noOfSplChars) > minLen )
            throw new IllegalArgumentException
            ("Min. Length should be atleast sum of (CAPS, DIGITS, SPL CHARS) Length!");
        Random rnd = new Random();
        int len = rnd.nextInt(maxLen - minLen + 1) + minLen;
        char[] pswd = new char[len];
        int index = 0;
        for (int i = 0; i < noOfCAPSAlpha; i++) {
            index = getNextIndex(rnd, len, pswd);
            pswd[index] = ALPHA_CAPS.charAt(rnd.nextInt(ALPHA_CAPS.length()));
        }
        for (int i = 0; i < noOfDigits; i++) {
            index = getNextIndex(rnd, len, pswd);
            pswd[index] = NUM.charAt(rnd.nextInt(NUM.length()));
        }
        for (int i = 0; i < noOfSplChars; i++) {
            index = getNextIndex(rnd, len, pswd);
            pswd[index] = SPL_CHARS.charAt(rnd.nextInt(SPL_CHARS.length()));
        }
        for(int i = 0; i < len; i++) {
            if(pswd[i] == 0) {
                pswd[i] = ALPHA.charAt(rnd.nextInt(ALPHA.length()));
            }
        }
        
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("RandomPasswordGeneratorUtil:: generatePswd method - END");
        }
        
        return pswd;
    }
 
    /**
     * Method to get the next index for generating the password.
     * 
     * @param rnd : instance of Random.
     * @param len : length
     * @param pswd : password character sequence.
     * 
     * @return index
     */
    private static int getNextIndex(Random rnd, int len, char[] pswd) {
    	if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("RandomPasswordGeneratorUtil:: getNextIndex method - START");
        }
        int index = rnd.nextInt(len);
        while(pswd[index = rnd.nextInt(len)] != 0);
        
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("RandomPasswordGeneratorUtil:: getNextIndex method - END");
        }
        return index;
    }
    
    public static void main(String[] args) {
        int noOfCAPSAlpha = 1;
        int noOfDigits = 1;
        int noOfSplChars = 1;
        int minLen = 8;
        int maxLen = 12;
 
        for (int i = 0; i < 10; i++) {
            char[] pswd = RandomPasswordGeneratorUtil.generatePswd(minLen, maxLen,
                    noOfCAPSAlpha, noOfDigits, noOfSplChars);
        }
    }
}